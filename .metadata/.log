!SESSION 2022-05-24 07:37:27.945 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

This is a continuation of log file C:\Users\nickr\OneDrive\Desktop\Code\BlackJack\.metadata\.bak_1.log
Created Time: 2022-05-24 16:09:43.834

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:09:43.834
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:09:45.310
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue() + 
											player1.getCard3().getValue() + player1.getCard4().getValue() +
											player1.getCard4().getValue() + player1.getCard5().getValue() ")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:09:45.311
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:09:45.311
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:09:50.848
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue() + 
											player1.getCard3().getValue() + player1.getCard4().getValue() +
											player1.getCard4().getValue() + player1.getCard5().getValue() +
											player1.getCard")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:09:50.850
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:09:50.850
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:09:52.361
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue() + 
											player1.getCard3().getValue() + player1.getCard4().getValue() +
											player1.getCard4().getValue() + player1.getCard5().getValue() +
											player1.getCard6")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:09:52.362
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:09:52.362
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:09:53.875
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue() + 
											player1.getCard3().getValue() + player1.getCard4().getValue() +
											player1.getCard4().getValue() + player1.getCard5().getValue() +
											player1.getCard6()")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:09:53.876
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:09:53.876
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:09:56.398
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue() + 
											player1.getCard3().getValue() + player1.getCard4().getValue() +
											player1.getCard4().getValue() + player1.getCard5().getValue() +
											player1.getCard6().get")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:09:56.399
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:09:56.400
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:09:57.410
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue() + 
											player1.getCard3().getValue() + player1.getCard4().getValue() +
											player1.getCard4().getValue() + player1.getCard5().getValue() +
											player1.getCard6().getValue()")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:09:57.411
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:09:57.412
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-25 11:25:36.938
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		// generate random numbers and assign them to Card objects
		// need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
			int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
			int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
			int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber
					|| playerCardNumber == dealerCardNumber2 || playerCardNumber2 == dealerCardNumber
					|| playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);

				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) + ")\n");

				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);

				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}

		// return amended deck
		return fullDeck;
	}

	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			// try {
			int userChoice = scnr.nextInt();
			if (userChoice == 1) {
				System.out.println("You Stand.");
				if (player1.getCard6() != null) {
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
					System.out.println(player1.getCard3() + " and " + player1.getCard4());
					System.out.println(player1.getCard5() + " and " + player1.getCard6() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + player1.getCard4().getValue()
									+ player1.getCard4().getValue() + player1.getCard5().getValue()
									+ player1.getCard6().getValue())
							+ ")");
				} else if (player1.getCard5() != null) {
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
					System.out.println(player1.getCard3() + " and " + player1.getCard4());
					System.out.println(player1.getCard5() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + player1.getCard4().getValue()
									+ player1.getCard4().getValue() + player1.getCard5().getValue())
							+ ")");
				} else if (player1.getCard4() != null) {
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
					System.out.println(player1.getCard3() + " and " + player1.getCard4() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + player1.getCard4().getValue() + ")"));
				} else if (player1.getCard3() != null) {
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
					System.out.println(player1.getCard3() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + ")"));
				} else if (player1.getCard2() != null) {
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
					 + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									 + ")"));
				} 
				userCont = false;
			} else if (userChoice == 2) {
				System.out.println("Another card on it's way...");
				// generate a new card

				System.out.println(deck.size()); // delete later once I'm sure this is correct

				// picking a random element from deck
				int max = deck.size() - 1;
				int min = 0;

				// generate random numbers and assign them to Card objects
				// need to store value in PLAYER object, not in variables

				int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
				Card playerCard = deck.get(playerCardNumber);
				if (player1.getCard5() != null) {
					player1.setCard6(playerCard);
					// int playerCardNumberValue = player1.getCard6().getValue();
				} else if (player1.getCard4() != null) {
					player1.setCard5(playerCard);
					// int playerCardNumberValue = player1.getCard5().getValue();
				} else if (player1.getCard3() != null) {
					player1.setCard4(playerCard);
					// int playerCardNumberValue = player1.getCard4().getValue();
				} else if (player1.getCard2() != null) {
					player1.setCard3(playerCard);
					// int playerCardNumberValue = player1.getCard3().getValue();
				}

				// printing out card for player
				System.out.println("Your next card is: ");
				if (player1.getCard6() != null) {
					System.out.println(playerCard.toString() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + player1.getCard4().getValue()
									+ player1.getCard5().getValue() + player1.getCard6().getValue() + ")" + "\n"));
				} else if (player1.getCard5() != null) {
					System.out.println(playerCard.toString() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + player1.getCard4().getValue()
									+ player1.getCard5().getValue() + ")" + "\n"));
				} else if (player1.getCard4() != null) {
					System.out.println(playerCard.toString() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + player1.getCard4().getValue() + ")" + "\n"));
				} else if (player1.getCard3() != null) {
					System.out.println(playerCard.toString() + " (" + (player1.getCard1().getValue()
							+ player1.getCard2().getValue() + player1.getCard3().getValue() + ")" + "\n"));
				}
				deck.remove(playerCardNumber);
				System.out.println(deck.size()); // delete later

				userCont = true;
			} else {
				System.out.println("Invalid Entry. Try again");
				userCont = true;
			}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		} // first while loop userCont. needs to be false to exit
		scnr.close();

		return deck;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-25 11:25:36.940
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-25 11:25:36.942
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-25 11:25:38.510
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		// generate random numbers and assign them to Card objects
		// need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
			int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
			int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
			int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber
					|| playerCardNumber == dealerCardNumber2 || playerCardNumber2 == dealerCardNumber
					|| playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);

				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) + ")\n");

				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);

				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}

		// return amended deck
		return fullDeck;
	}

	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			// try {
			int userChoice = scnr.nextInt();
			if (userChoice == 1) {
				System.out.println("You Stand.");
				if (player1.getCard6() != null) {
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
					System.out.println(player1.getCard3() + " and " + player1.getCard4());
					System.out.println(player1.getCard5() + " and " + player1.getCard6() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + player1.getCard4().getValue()
									+ player1.getCard4().getValue() + player1.getCard5().getValue()
									+ player1.getCard6().getValue())
							+ ")");
				} else if (player1.getCard5() != null) {
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
					System.out.println(player1.getCard3() + " and " + player1.getCard4());
					System.out.println(player1.getCard5() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + player1.getCard4().getValue()
									+ player1.getCard4().getValue() + player1.getCard5().getValue())
							+ ")");
				} else if (player1.getCard4() != null) {
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
					System.out.println(player1.getCard3() + " and " + player1.getCard4() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + player1.getCard4().getValue() + ")"));
				} else if (player1.getCard3() != null) {
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
					System.out.println(player1.getCard3() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + ")"));
				} else if (player1.getCard2() != null) {
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
					 + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									 + ")"));
				} 
				userCont = false;
			} else if (userChoice == 2) {
				System.out.println("Another card on it's way...");
				// generate a new card

				System.out.println(deck.size()); // delete later once I'm sure this is correct

				// picking a random element from deck
				int max = deck.size() - 1;
				int min = 0;

				// generate random numbers and assign them to Card objects
				// need to store value in PLAYER object, not in variables

				int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
				Card playerCard = deck.get(playerCardNumber);
				if (player1.getCard5() != null) {
					player1.setCard6(playerCard);
					// int playerCardNumberValue = player1.getCard6().getValue();
				} else if (player1.getCard4() != null) {
					player1.setCard5(playerCard);
					// int playerCardNumberValue = player1.getCard5().getValue();
				} else if (player1.getCard3() != null) {
					player1.setCard4(playerCard);
					// int playerCardNumberValue = player1.getCard4().getValue();
				} else if (player1.getCard2() != null) {
					player1.setCard3(playerCard);
					// int playerCardNumberValue = player1.getCard3().getValue();
				}

				// printing out card for player
				System.out.println("Your next card is: ");
				if (player1.getCard6() != null) {
					System.out.println(playerCard.toString() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + player1.getCard4().getValue()
									+ player1.getCard5().getValue() + player1.getCard6().getValue() + ")" + "\n"));
				} else if (player1.getCard5() != null) {
					System.out.println(playerCard.toString() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + player1.getCard4().getValue()
									+ player1.getCard5().getValue() + ")" + "\n"));
				} else if (player1.getCard4() != null) {
					System.out.println(playerCard.toString() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + player1.getCard4().getValue() + ")" + "\n"));
				} else if (player1.getCard3() != null) {
					System.out.println(playerCard.toString() + " (" + (player1.getCard1().getValue()
							+ player1.getCard2().getValue() + player1.getCard3().getValue() + ")" + "\n"));
				}
				deck.remove(playerCardNumber);
				System.out.println(deck.size()); // delete later

				userCont = true;
			} else {
				System.out.println("Invalid Entry. Try again");
				userCont = true;
			}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		} // first while loop userCont. needs to be false to exit
		scnr.close();

		return deck;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-25 11:25:38.511
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-25 11:25:38.511
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-25 11:25:38.651
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		// generate random numbers and assign them to Card objects
		// need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
			int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
			int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
			int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber
					|| playerCardNumber == dealerCardNumber2 || playerCardNumber2 == dealerCardNumber
					|| playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);

				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) + ")\n");

				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);

				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}

		// return amended deck
		return fullDeck;
	}

	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			// try {
			int userChoice = scnr.nextInt();
			if (userChoice == 1) {
				System.out.println("You Stand.");
				if (player1.getCard6() != null) {
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
					System.out.println(player1.getCard3() + " and " + player1.getCard4());
					System.out.println(player1.getCard5() + " and " + player1.getCard6() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + player1.getCard4().getValue()
									+ player1.getCard4().getValue() + player1.getCard5().getValue()
									+ player1.getCard6().getValue())
							+ ")");
				} else if (player1.getCard5() != null) {
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
					System.out.println(player1.getCard3() + " and " + player1.getCard4());
					System.out.println(player1.getCard5() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + player1.getCard4().getValue()
									+ player1.getCard4().getValue() + player1.getCard5().getValue())
							+ ")");
				} else if (player1.getCard4() != null) {
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
					System.out.println(player1.getCard3() + " and " + player1.getCard4() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + player1.getCard4().getValue() + ")"));
				} else if (player1.getCard3() != null) {
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
					System.out.println(player1.getCard3() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + ")"));
				} else if (player1.getCard2() != null) {
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
					 + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									 + ")"));
				} 
				userCont = false;
			} else if (userChoice == 2) {
				System.out.println("Another card on it's way...");
				// generate a new card

				System.out.println(deck.size()); // delete later once I'm sure this is correct

				// picking a random element from deck
				int max = deck.size() - 1;
				int min = 0;

				// generate random numbers and assign them to Card objects
				// need to store value in PLAYER object, not in variables

				int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
				Card playerCard = deck.get(playerCardNumber);
				if (player1.getCard5() != null) {
					player1.setCard6(playerCard);
					// int playerCardNumberValue = player1.getCard6().getValue();
				} else if (player1.getCard4() != null) {
					player1.setCard5(playerCard);
					// int playerCardNumberValue = player1.getCard5().getValue();
				} else if (player1.getCard3() != null) {
					player1.setCard4(playerCard);
					// int playerCardNumberValue = player1.getCard4().getValue();
				} else if (player1.getCard2() != null) {
					player1.setCard3(playerCard);
					// int playerCardNumberValue = player1.getCard3().getValue();
				}

				// printing out card for player
				System.out.println("Your next card is: ");
				if (player1.getCard6() != null) {
					System.out.println(playerCard.toString() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + player1.getCard4().getValue()
									+ player1.getCard5().getValue() + player1.getCard6().getValue() + ")" + "\n"));
				} else if (player1.getCard5() != null) {
					System.out.println(playerCard.toString() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + player1.getCard4().getValue()
									+ player1.getCard5().getValue() + ")" + "\n"));
				} else if (player1.getCard4() != null) {
					System.out.println(playerCard.toString() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + player1.getCard4().getValue() + ")" + "\n"));
				} else if (player1.getCard3() != null) {
					System.out.println(playerCard.toString() + " (" + (player1.getCard1().getValue()
							+ player1.getCard2().getValue() + player1.getCard3().getValue() + ")" + "\n"));
				}
				deck.remove(playerCardNumber);
				System.out.println(deck.size()); // delete later

				userCont = true;
			} else {
				System.out.println("Invalid Entry. Try again");
				userCont = true;
			}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		} // first while loop userCont. needs to be false to exit
		scnr.close();

		return deck;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-25 11:25:38.652
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-25 11:25:38.653
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-25 11:25:47.918
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		// generate random numbers and assign them to Card objects
		// need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
			int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
			int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
			int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber
					|| playerCardNumber == dealerCardNumber2 || playerCardNumber2 == dealerCardNumber
					|| playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);

				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) + ")\n");

				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);

				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}

		// return amended deck
		return fullDeck;
	}

	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			// try {
			int userChoice = scnr.nextInt();
			if (userChoice == 1) {
				System.out.println("You Stand.");
				if (player1.getCard6() != null) {
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
					System.out.println(player1.getCard3() + " and " + player1.getCard4());
					System.out.println(player1.getCard5() + " and " + player1.getCard6() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + player1.getCard4().getValue()
									+ player1.getCard4().getValue() + player1.getCard5().getValue()
									+ player1.getCard6().getValue())
							+ ")");
				} else if (player1.getCard5() != null) {
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
					System.out.println(player1.getCard3() + " and " + player1.getCard4());
					System.out.println(player1.getCard5() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + player1.getCard4().getValue()
									+ player1.getCard4().getValue() + player1.getCard5().getValue())
							+ ")");
				} else if (player1.getCard4() != null) {
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
					System.out.println(player1.getCard3() + " and " + player1.getCard4() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + player1.getCard4().getValue() + ")"));
				} else if (player1.getCard3() != null) {
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
					System.out.println(player1.getCard3() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + ")"));
				} else if (player1.getCard2() != null) {
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
					 + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									 + ")"));
				} 
				userCont = false;
			} else if (userChoice == 2) {
				System.out.println("Another card on it's way...");
				// generate a new card

				System.out.println(deck.size()); // delete later once I'm sure this is correct

				// picking a random element from deck
				int max = deck.size() - 1;
				int min = 0;

				// generate random numbers and assign them to Card objects
				// need to store value in PLAYER object, not in variables

				int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
				Card playerCard = deck.get(playerCardNumber);
				if (player1.getCard5() != null) {
					player1.setCard6(playerCard);
					// int playerCardNumberValue = player1.getCard6().getValue();
				} else if (player1.getCard4() != null) {
					player1.setCard5(playerCard);
					// int playerCardNumberValue = player1.getCard5().getValue();
				} else if (player1.getCard3() != null) {
					player1.setCard4(playerCard);
					// int playerCardNumberValue = player1.getCard4().getValue();
				} else if (player1.getCard2() != null) {
					player1.setCard3(playerCard);
					// int playerCardNumberValue = player1.getCard3().getValue();
				}

				// printing out card for player
				System.out.println("Your next card is: ");
				if (player1.getCard6() != null) {
					System.out.println(playerCard.toString() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + player1.getCard4().getValue()
									+ player1.getCard5().getValue() + player1.getCard6().getValue() + ")" + "\n"));
				} else if (player1.getCard5() != null) {
					System.out.println(playerCard.toString() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + player1.getCard4().getValue()
									+ player1.getCard5().getValue() + ")" + "\n"));
				} else if (player1.getCard4() != null) {
					System.out.println(playerCard.toString() + " ("
							+ (player1.getCard1().getValue() + player1.getCard2().getValue()
									+ player1.getCard3().getValue() + player1.getCard4().getValue() + ")" + "\n"));
				} else if (player1.getCard3() != null) {
					System.out.println(playerCard.toString() + " (" + (player1.getCard1().getValue()
							+ player1.getCard2().getValue() + player1.getCard3().getValue() + ")" + "\n"));
				}
				deck.remove(playerCardNumber);
				System.out.println(deck.size()); // delete later

				userCont = true;
			} else {
				System.out.println("Invalid Entry. Try again");
				userCont = true;
			}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		} // first while loop userCont. needs to be false to exit
		scnr.close();

		return deck;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor60.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:487)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1280)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1059)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1084)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1069)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1111)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1107)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1536)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4875)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4753)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5002)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3630)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-25 11:25:47.920
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor60.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:487)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1280)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1059)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1084)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1069)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1111)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1107)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1536)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4875)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4753)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5002)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3630)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-25 11:25:47.921
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor60.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:487)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1280)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1059)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1084)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1069)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1111)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1107)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1536)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4875)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4753)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5002)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3630)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1154)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1045)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-27 14:38:44.753
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Player {

	private String name;
	private double bank;
	private double bet;
	private Card card1;
	private Card card2;
	private Card card3;
	private Card card4;
	private Card card5;
	private Card card6;
	private int cardCount;
	boolean bust = false;
	boolean blackJack = false; 
	
	
	public boolean getBlackJack() {
		return blackJack;
	}

	public void setBlackJack(boolean blackJack) {
		this.blackJack = blackJack;
	}

	private int aceCount;

	public boolean getBust() {
		return bust;
	}

	public void setBust(boolean bust) {
		this.bust = bust;
	}

	public Player(String name, double bet) {
		this.name = name;
		this.bank = 100;
		this.bet = bet;
	}
	
	public Player(String name, double bet, Card card1, Card card2) {
		this.name = name;
		this.bet = bet;
		this.card1 = card1;
		this.card2 = card2;
	}
	public Card getCard1() {
		return card1;
	}

	public void setCard1(Card card1) {
		this.card1 = card1;
	}

	public Card getCard2() {
		return card2;
	}

	public void setCard2(Card card2) {
		this.card2 = card2;
	}

	public Card getCard3() {
		return card3;
	}

	public void setCard3(Card card3) {
		this.card3 = card3;
	}

	public Card getCard4() {
		return card4;
	}

	public void setCard4(Card card4) {
		this.card4 = card4;
	}

	public Card getCard5() {
		return card5;
	}

	public void setCard5(Card card5) {
		this.card5 = card5;
	}

	public Card getCard6() {
		return card6;
	}

	public void setCard6(Card card6) {
		this.card6 = card6;
	}


	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public double getBank() {
		return bank;
	}

	public void setBank(double bank) {
		this.bank = bank;
	}

	public double getBet() {
		return bet;
	}

	public void setBet(double bet) {
		this.bet = bet;
	}
	
	public double playerBet() {
		this.bank = this.bank - this.bet;
		return this.bank;
	}
	

	@Override
	public String toString() {
		return "Player card1=" + card1 + ", card2=" + card2 + "]";
	}

	public int getCardCount() {
		return cardCount;
	}
	
	public void setCardCount(int cardCount) {
		this.cardCount = cardCount;
	}

	public int getAceCount() {
		return aceCount;
	}

	public void setAceCount(int aceCount) {
		this.aceCount = aceCount;
	}
	
	public void resetCards() {
		if (this.card6 != null) {
			this.card6 = null;
		} else if (this.card5 != null) {
			this.card5 = null;
		} else if (this.card4 != null) {
			this.card4 = null;
		} else if (this.card3 != null) {
			this.card3 = null;
		} else if (this.card2 != null) {
			this.card2 = null;
		} else if (this.card1 != null) {
			this.card1 = null;
		}
	}
	
	public void getValue6() {
		(player1.getCard1().getValue() + player1.getCard2().getValue()
				+ player1.getCard3().getValue() + player1.getCard4().getValue()
				+ player1.getCard4().getValue() + player1.getCard5().getValue()
				+ player1.getCard6().getValue())
	}
	
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-27 14:38:44.757
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-27 14:38:44.757
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-27 14:38:47.367
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Player {

	private String name;
	private double bank;
	private double bet;
	private Card card1;
	private Card card2;
	private Card card3;
	private Card card4;
	private Card card5;
	private Card card6;
	private int cardCount;
	boolean bust = false;
	boolean blackJack = false; 
	
	
	public boolean getBlackJack() {
		return blackJack;
	}

	public void setBlackJack(boolean blackJack) {
		this.blackJack = blackJack;
	}

	private int aceCount;

	public boolean getBust() {
		return bust;
	}

	public void setBust(boolean bust) {
		this.bust = bust;
	}

	public Player(String name, double bet) {
		this.name = name;
		this.bank = 100;
		this.bet = bet;
	}
	
	public Player(String name, double bet, Card card1, Card card2) {
		this.name = name;
		this.bet = bet;
		this.card1 = card1;
		this.card2 = card2;
	}
	public Card getCard1() {
		return card1;
	}

	public void setCard1(Card card1) {
		this.card1 = card1;
	}

	public Card getCard2() {
		return card2;
	}

	public void setCard2(Card card2) {
		this.card2 = card2;
	}

	public Card getCard3() {
		return card3;
	}

	public void setCard3(Card card3) {
		this.card3 = card3;
	}

	public Card getCard4() {
		return card4;
	}

	public void setCard4(Card card4) {
		this.card4 = card4;
	}

	public Card getCard5() {
		return card5;
	}

	public void setCard5(Card card5) {
		this.card5 = card5;
	}

	public Card getCard6() {
		return card6;
	}

	public void setCard6(Card card6) {
		this.card6 = card6;
	}


	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public double getBank() {
		return bank;
	}

	public void setBank(double bank) {
		this.bank = bank;
	}

	public double getBet() {
		return bet;
	}

	public void setBet(double bet) {
		this.bet = bet;
	}
	
	public double playerBet() {
		this.bank = this.bank - this.bet;
		return this.bank;
	}
	

	@Override
	public String toString() {
		return "Player card1=" + card1 + ", card2=" + card2 + "]";
	}

	public int getCardCount() {
		return cardCount;
	}
	
	public void setCardCount(int cardCount) {
		this.cardCount = cardCount;
	}

	public int getAceCount() {
		return aceCount;
	}

	public void setAceCount(int aceCount) {
		this.aceCount = aceCount;
	}
	
	public void resetCards() {
		if (this.card6 != null) {
			this.card6 = null;
		} else if (this.card5 != null) {
			this.card5 = null;
		} else if (this.card4 != null) {
			this.card4 = null;
		} else if (this.card3 != null) {
			this.card3 = null;
		} else if (this.card2 != null) {
			this.card2 = null;
		} else if (this.card1 != null) {
			this.card1 = null;
		}
	}
	
	public void getValue6() {
		(player1.getCard1().getValue() + player1.getCard2().getValue()
				+ player1.getCard3().getValue() + player1.getCard4().getValue()
				+ player1.getCard4().getValue() + player1.getCard5().getValue()
				+ player1.getCard6().getValue())
	}
	
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-27 14:38:47.368
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-27 14:38:47.369
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-27 14:38:49.557
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------

public class Player {

	private String name;
	private double bank;
	private double bet;
	private Card card1;
	private Card card2;
	private Card card3;
	private Card card4;
	private Card card5;
	private Card card6;
	private int cardCount;
	boolean bust = false;
	boolean blackJack = false; 
	
	
	public boolean getBlackJack() {
		return blackJack;
	}

	public void setBlackJack(boolean blackJack) {
		this.blackJack = blackJack;
	}

	private int aceCount;

	public boolean getBust() {
		return bust;
	}

	public void setBust(boolean bust) {
		this.bust = bust;
	}

	public Player(String name, double bet) {
		this.name = name;
		this.bank = 100;
		this.bet = bet;
	}
	
	public Player(String name, double bet, Card card1, Card card2) {
		this.name = name;
		this.bet = bet;
		this.card1 = card1;
		this.card2 = card2;
	}
	public Card getCard1() {
		return card1;
	}

	public void setCard1(Card card1) {
		this.card1 = card1;
	}

	public Card getCard2() {
		return card2;
	}

	public void setCard2(Card card2) {
		this.card2 = card2;
	}

	public Card getCard3() {
		return card3;
	}

	public void setCard3(Card card3) {
		this.card3 = card3;
	}

	public Card getCard4() {
		return card4;
	}

	public void setCard4(Card card4) {
		this.card4 = card4;
	}

	public Card getCard5() {
		return card5;
	}

	public void setCard5(Card card5) {
		this.card5 = card5;
	}

	public Card getCard6() {
		return card6;
	}

	public void setCard6(Card card6) {
		this.card6 = card6;
	}


	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public double getBank() {
		return bank;
	}

	public void setBank(double bank) {
		this.bank = bank;
	}

	public double getBet() {
		return bet;
	}

	public void setBet(double bet) {
		this.bet = bet;
	}
	
	public double playerBet() {
		this.bank = this.bank - this.bet;
		return this.bank;
	}
	

	@Override
	public String toString() {
		return "Player card1=" + card1 + ", card2=" + card2 + "]";
	}

	public int getCardCount() {
		return cardCount;
	}
	
	public void setCardCount(int cardCount) {
		this.cardCount = cardCount;
	}

	public int getAceCount() {
		return aceCount;
	}

	public void setAceCount(int aceCount) {
		this.aceCount = aceCount;
	}
	
	public void resetCards() {
		if (this.card6 != null) {
			this.card6 = null;
		} else if (this.card5 != null) {
			this.card5 = null;
		} else if (this.card4 != null) {
			this.card4 = null;
		} else if (this.card3 != null) {
			this.card3 = null;
		} else if (this.card2 != null) {
			this.card2 = null;
		} else if (this.card1 != null) {
			this.card1 = null;
		}
	}
	
	public void getValue6() {
		(player1.getCard1().getValue() + player1.getCard2().getValue()
				+ player1.getCard3().getValue() + player1.getCard4().getValue()
				+ player1.getCard4().getValue() + player1.getCard5().getValue()
				+ player1.getCard6().getValue())
	}
	
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-27 14:38:49.558
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-27 14:38:49.559
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SESSION 2022-05-27 15:01:53.465 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-05-27 15:02:32.386
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-27 15:02:32.386
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@22b4ad0c,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@25af1dbf,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-27 15:02:32.386
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2cdcedef,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@43778d6d,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-05-27 15:02:38.729
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nickr'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
