!SESSION 2022-05-24 07:37:27.945 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

This is a continuation of log file C:\Users\nickr\OneDrive\Desktop\Code\BlackJack\.metadata\.bak_0.log
Created Time: 2022-05-24 16:07:59.695

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:07:59.695
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:07:59.697
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:00.275
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									);+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:08:00.276
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:08:00.277
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:01.289
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									);+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:08:01.290
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:08:01.290
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:03.407
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
							);+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:08:03.408
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:08:03.408
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:04.421
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:08:04.423
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:08:04.423
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:06.238
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:08:06.239
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:08:06.240
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:06.954
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:08:06.954
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:08:06.956
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:06.964
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:08:06.965
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:08:06.965
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:08.807
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:08:08.808
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:08:08.808
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:08.819
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:08:08.820
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:08:08.820
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:13.398
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:08:13.399
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:08:13.400
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:14.945
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + 
									")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:08:14.946
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:08:14.946
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:16.458
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + 
											")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:08:16.459
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:08:16.459
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:17.971
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + 
											player")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:08:17.972
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:08:17.972
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:20.988
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + 
											player1.getCard")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:08:20.989
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:08:20.989
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:22.530
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + 
											player1.getCard")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:08:22.530
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:08:22.530
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:27.006
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + 
											player1.getCard3")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:08:27.007
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:08:27.007
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:30.022
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + 
											player1.getCard3().getValue")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:08:30.023
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:08:30.023
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:31.538
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + 
											player1.getCard3().getValue()")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:08:31.539
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:08:31.540
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:32.548
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + 
											player1.getCard3().getValue() ")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:08:32.548
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:08:32.549
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:37.064
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + 
											player1.getCard3().getValue() + player1.getCard")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:08:37.065
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:08:37.065
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:38.580
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + 
											player1.getCard3().getValue() + player1.getCard4()")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:08:38.582
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:08:38.583
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:40.099
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + 
											player1.getCard3().getValue() + player1.getCard4().get")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:08:40.101
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:08:40.101
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:41.116
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + 
											player1.getCard3().getValue() + player1.getCard4().getValue()")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:08:41.117
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:08:41.118
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:42.626
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + 
											player1.getCard3().getValue() + player1.getCard4().getValue()")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:08:42.627
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:08:42.628
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:45.518
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + 
											player1.getCard3().getValue() + player1.getCard4().getValue()")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:08:45.519
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:08:45.521
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:47.136
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue()) + 
											player1.getCard3().getValue() + player1.getCard4().getValue()")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:08:47.137
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:08:47.137
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:47.150
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue()) + 
											player1.getCard3().getValue() + player1.getCard4().getValue()")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:08:47.151
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:08:47.152
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:54.758
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue()) + 
											player1.getCard3().getValue() + player1.getCard4().getValue()")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:08:54.759
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:08:54.760
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:56.391
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue()) + 
											player1.getCard3().getValue() + player1.getCard4().getValue()")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:08:56.392
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:08:56.393
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:08:59.164
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue()) + 
											player1.getCard3().getValue() + player1.getCard4().getValue() +")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:08:59.166
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:08:59.167
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:09:00.974
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue()) + 
											player1.getCard3().getValue() + player1.getCard4().getValue() +")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:09:00.975
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:09:00.975
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:09:05.213
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue()) + 
											player1.getCard3().getValue() + player1.getCard4().getValue() +")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:09:05.214
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:09:05.215
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:09:05.225
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue()) + 
											player1.getCard3().getValue() + player1.getCard4().getValue() +")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:09:05.226
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:09:05.226
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:09:09.944
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue()) + 
											player1.getCard3().getValue() + player1.getCard4().getValue() +")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:09:09.945
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:09:09.945
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:09:29.246
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue() + 
											player1.getCard3().getValue() + player1.getCard4().getValue() +
											player1.getCard3().getValue() + player1.getCard4().getValue()")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:09:29.247
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:09:29.247
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:09:31.002
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue() + 
											player1.getCard3().getValue() + player1.getCard4().getValue() +
											player1.getCard3().getValue() + player1.getCard4().getValue()")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:09:31.003
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:09:31.003
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:09:31.266
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue() + 
											player1.getCard3().getValue() + player1.getCard4().getValue() +
											player1.getCard3().getValue() + player1.getCard4().getValue()")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:09:31.267
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:09:31.268
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:09:32.268
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue() + 
											player1.getCard3().getValue() + player1.getCard4().getValue() +
											player1.getCard().getValue() + player1.getCard4().getValue()")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:09:32.270
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:09:32.270
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:09:33.782
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue() + 
											player1.getCard3().getValue() + player1.getCard4().getValue() +
											player1.getCard().getValue() + player1.getCard4().getValue()")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:09:33.783
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:09:33.783
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:09:34.781
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue() + 
											player1.getCard3().getValue() + player1.getCard4().getValue() +
											player1.getCard4().getValue() + player1.getCard4().getValue()")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:09:34.782
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:09:34.782
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:09:36.322
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue() + 
											player1.getCard3().getValue() + player1.getCard4().getValue() +
											player1.getCard4().getValue() + player1.getCard4().getValue()")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:09:36.323
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:09:36.324
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:09:36.331
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue() + 
											player1.getCard3().getValue() + player1.getCard4().getValue() +
											player1.getCard4().getValue() + player1.getCard4().getValue()")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:09:36.332
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:09:36.332
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:09:36.341
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue() + 
											player1.getCard3().getValue() + player1.getCard4().getValue() +
											player1.getCard4().getValue() + player1.getCard4().getValue()")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:09:36.342
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:09:36.342
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:09:40.296
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue() + 
											player1.getCard3().getValue() + player1.getCard4().getValue() +
											player1.getCard4().getValue() + player1.getCard5().getValue()")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-24 16:09:40.297
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-24 16:09:40.297
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:09:40.311
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue() + 
											player1.getCard3().getValue() + player1.getCard4().getValue() +
											player1.getCard4().getValue() + player1.getCard5().getValue()")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:09:40.312
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-24 16:09:40.312
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-24 16:09:43.832
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Methods {
	
	

	protected static ArrayList<Card> fillDeck(ArrayList<Card> fullDeck) {
		// create Heart Cards
		Card aceHeart = new Card(Rank.Ace, Suit.Heart);
		Card kingHeart = new Card(Rank.King, Suit.Heart);
		Card queenHeart = new Card(Rank.Queen, Suit.Heart);
		Card jackHeart = new Card(Rank.Jack, Suit.Heart);
		Card tenHeart = new Card(Rank.Ten, Suit.Heart);
		Card nineHeart = new Card(Rank.Nine, Suit.Heart);
		Card eightHeart = new Card(Rank.Eight, Suit.Heart);
		Card sevenHeart = new Card(Rank.Seven, Suit.Heart);
		Card sixHeart = new Card(Rank.Six, Suit.Heart);
		Card fiveHeart = new Card(Rank.Five, Suit.Heart);
		Card fourHeart = new Card(Rank.Four, Suit.Heart);
		Card threeHeart = new Card(Rank.Three, Suit.Heart);
		Card twoHeart = new Card(Rank.Two, Suit.Heart);

		// create Spade Cards
		Card aceSpade = new Card(Rank.Ace, Suit.Spade);
		Card kingSpade = new Card(Rank.King, Suit.Spade);
		Card queenSpade = new Card(Rank.Queen, Suit.Spade);
		Card jackSpade = new Card(Rank.Jack, Suit.Spade);
		Card tenSpade = new Card(Rank.Ten, Suit.Spade);
		Card nineSpade = new Card(Rank.Nine, Suit.Spade);
		Card eightSpade = new Card(Rank.Eight, Suit.Spade);
		Card sevenSpade = new Card(Rank.Seven, Suit.Spade);
		Card sixSpade = new Card(Rank.Six, Suit.Spade);
		Card fiveSpade = new Card(Rank.Five, Suit.Spade);
		Card fourSpade = new Card(Rank.Four, Suit.Spade);
		Card threeSpade = new Card(Rank.Three, Suit.Spade);
		Card twoSpade = new Card(Rank.Two, Suit.Spade);

		// create Diamond Cards
		Card aceDiamond = new Card(Rank.Ace, Suit.Diamond);
		Card kingDiamond = new Card(Rank.King, Suit.Diamond);
		Card queenDiamond = new Card(Rank.Queen, Suit.Diamond);
		Card jackDiamond = new Card(Rank.Jack, Suit.Diamond);
		Card tenDiamond = new Card(Rank.Ten, Suit.Diamond);
		Card nineDiamond = new Card(Rank.Nine, Suit.Diamond);
		Card eightDiamond = new Card(Rank.Eight, Suit.Diamond);
		Card sevenDiamond = new Card(Rank.Seven, Suit.Diamond);
		Card sixDiamond = new Card(Rank.Six, Suit.Diamond);
		Card fiveDiamond = new Card(Rank.Five, Suit.Diamond);
		Card fourDiamond = new Card(Rank.Four, Suit.Diamond);
		Card threeDiamond = new Card(Rank.Three, Suit.Diamond);
		Card twoDiamond = new Card(Rank.Two, Suit.Diamond);

		// create Club Cards
		Card aceClub = new Card(Rank.Ace, Suit.Club);
		Card kingClub = new Card(Rank.King, Suit.Club);
		Card queenClub = new Card(Rank.Queen, Suit.Club);
		Card jackClub = new Card(Rank.Jack, Suit.Club);
		Card tenClub = new Card(Rank.Ten, Suit.Club);
		Card nineClub = new Card(Rank.Nine, Suit.Club);
		Card eightClub = new Card(Rank.Eight, Suit.Club);
		Card sevenClub = new Card(Rank.Seven, Suit.Club);
		Card sixClub = new Card(Rank.Six, Suit.Club);
		Card fiveClub = new Card(Rank.Five, Suit.Club);
		Card fourClub = new Card(Rank.Four, Suit.Club);
		Card threeClub = new Card(Rank.Three, Suit.Club);
		Card twoClub = new Card(Rank.Two, Suit.Club);

		// add all Cards to deck
		fullDeck.add(aceHeart);
		fullDeck.add(kingHeart);
		fullDeck.add(queenHeart);
		fullDeck.add(jackHeart);
		fullDeck.add(tenHeart);
		fullDeck.add(nineHeart);
		fullDeck.add(eightHeart);
		fullDeck.add(sevenHeart);
		fullDeck.add(sixHeart);
		fullDeck.add(fiveHeart);
		fullDeck.add(fourHeart);
		fullDeck.add(threeHeart);
		fullDeck.add(twoHeart);

		fullDeck.add(aceSpade);
		fullDeck.add(kingSpade);
		fullDeck.add(queenSpade);
		fullDeck.add(jackSpade);
		fullDeck.add(tenSpade);
		fullDeck.add(nineSpade);
		fullDeck.add(eightSpade);
		fullDeck.add(sevenSpade);
		fullDeck.add(sixSpade);
		fullDeck.add(fiveSpade);
		fullDeck.add(fourSpade);
		fullDeck.add(threeSpade);
		fullDeck.add(twoSpade);

		fullDeck.add(aceDiamond);
		fullDeck.add(kingDiamond);
		fullDeck.add(queenDiamond);
		fullDeck.add(jackDiamond);
		fullDeck.add(tenDiamond);
		fullDeck.add(nineDiamond);
		fullDeck.add(eightDiamond);
		fullDeck.add(sevenDiamond);
		fullDeck.add(sixDiamond);
		fullDeck.add(fiveDiamond);
		fullDeck.add(fourDiamond);
		fullDeck.add(threeDiamond);
		fullDeck.add(twoDiamond);

		fullDeck.add(aceClub);
		fullDeck.add(kingClub);
		fullDeck.add(queenClub);
		fullDeck.add(jackClub);
		fullDeck.add(tenClub);
		fullDeck.add(nineClub);
		fullDeck.add(eightClub);
		fullDeck.add(sevenClub);
		fullDeck.add(sixClub);
		fullDeck.add(fiveClub);
		fullDeck.add(fourClub);
		fullDeck.add(threeClub);
		fullDeck.add(twoClub);
		return fullDeck;
	}

	protected static ArrayList<Card> deal(ArrayList<Card> fullDeck, Player player1, Dealer dealer) {
		boolean cardsMatch = true;
		System.out.println(fullDeck.size());

		// picking a random element from fullDeck
		int max = fullDeck.size() - 1;
		int min = 0;

		//generate random numbers and assign them to Card objects
		//need to store value in PLAYER object, not in variables
		while (cardsMatch == true) {
		int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int playerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
		int dealerCardNumber2 = (int) Math.floor(Math.random() * (max - min + 1) + min);
			if (playerCardNumber == playerCardNumber2 || playerCardNumber == dealerCardNumber || playerCardNumber == dealerCardNumber2 
					|| playerCardNumber2 == dealerCardNumber || playerCardNumber2 == dealerCardNumber2 || dealerCardNumber == dealerCardNumber2) {
				cardsMatch = true;
			} else {
				cardsMatch = false;
				Card playerCard = fullDeck.get(playerCardNumber);
				Card playerCard2 = fullDeck.get(playerCardNumber2);
				player1.setCard1(playerCard);
				player1.setCard2(playerCard2);
				Card dealerCard = fullDeck.get(dealerCardNumber);
				Card dealerCard2 = fullDeck.get(dealerCardNumber2);
				dealer.setCard1(dealerCard);
				dealer.setCard2(dealerCard2);
				
				int playerCardNumberValue = player1.getCard1().getValue();
				int playerCardNumber2Value = player1.getCard2().getValue();
				int dealerCardNumberValue = dealer.getCard1().getValue();
				int dealerCardNumberValue2 = dealer.getCard2().getValue();

				
				
				// printing out cards for dealer and player
				System.out.println("Your first two cards are: ");
				System.out.println(playerCard.toString() + " and " + playerCard2.toString() + " ("
						+ (playerCardNumberValue + playerCardNumber2Value) + ")" + "\n");
				System.out.println("The dealer's first card is: ");
				System.out.println(dealerCard.toString() + " (" + (dealerCardNumberValue) +")\n");
				
				// remove printed cards from deck
				fullDeck.remove(playerCardNumber);
				fullDeck.remove(playerCardNumber2);
				fullDeck.remove(dealerCardNumber);
				fullDeck.remove(dealerCardNumber2);
				
				// check to see how many cards are left in deck
				System.out.println(fullDeck.size());
			}
		}
		
		// return amended deck
		return fullDeck;
	}
	
	public static ArrayList<Card> play(ArrayList<Card> deck, Player player1, Dealer dealer) {
		boolean userCont = true;
		Scanner scnr = new Scanner(System.in);
		while (userCont == true) {
			System.out.println("What would you like to do?");
			System.out.println("1. Stand");
			System.out.println("2. Hit");
			//try {
				int userChoice = scnr.nextInt();
				if (userChoice == 1) {
					System.out.println("You Stand.");
						if (player1.getCard6() != null) {
							System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2());
							System.out.println(player1.getCard3() + " and " + player1.getCard4());
							System.out.println(player1.getCard5() + " and " + player1.getCard6() +
									" (" + (player1.getCard1().getValue() + player1.getCard2().getValue() + 
											player1.getCard3().getValue() + player1.getCard4().getValue() +
											player1.getCard4().getValue() + player1.getCard5().getValue()")");+ 
									" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
						}
					System.out.println("You have " + player1.getCard1() + " and " + player1.getCard2() + 
							" (" + (player1.getCard1().getValue() + player1.getCard1().getValue()) + ")");
					userCont = false;
				} else if (userChoice == 2) {
					System.out.println("Another card on it's way...");
					//generate a new card
					
					System.out.println(deck.size()); // delete later once I'm sure this is correct

					// picking a random element from deck
					int max = deck.size() - 1;
					int min = 0;
					
					//generate random numbers and assign them to Card objects
					//need to store value in PLAYER object, not in variables
					
					int playerCardNumber = (int) Math.floor(Math.random() * (max - min + 1) + min);
					Card playerCard = deck.get(playerCardNumber);
						if (player1.getCard5() != null) {
							player1.setCard6(playerCard);
							//int playerCardNumberValue = player1.getCard6().getValue();
						} else if (player1.getCard4() != null) {
							player1.setCard5(playerCard);
							//int playerCardNumberValue = player1.getCard5().getValue();
						} else if (player1.getCard3() != null) {
							player1.setCard4(playerCard);
							//int playerCardNumberValue = player1.getCard4().getValue();
						} else if (player1.getCard2() != null) {
							player1.setCard3(playerCard);
							//int playerCardNumberValue = player1.getCard3().getValue();
						}
						
						// printing out card for player
						System.out.println("Your next card is: ");
							if (player1.getCard6() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												player1.getCard6().getValue() + ")" + "\n"));
							} else if (player1.getCard5() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												player1.getCard5().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard4() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												player1.getCard4().getValue() +
												 ")" + "\n"));
							} else if (player1.getCard3() != null) {
								System.out.println(playerCard.toString() + 
										" ("
										+ (player1.getCard1().getValue() +
												player1.getCard2().getValue() +
												player1.getCard3().getValue() +
												 ")" + "\n"));
							}
						deck.remove(playerCardNumber);
						System.out.println(deck.size()); // delete later

					userCont = true;
				} else {
					System.out.println("Invalid Entry. Try again");
					userCont = true;
				}
//			} catch (Exception e) {
//				System.out.println("Choice was not a valid number. Try again");
//				scnr.next();
//				userCont = true;
//			}
		}//first while loop userCont. needs to be false to exit 
		scnr.close();
		
		return deck;
	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-24 16:09:43.833
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3504)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)
